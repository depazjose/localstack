<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.mdt</groupId>
	<artifactId>local</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>local</name>
	<description>Localstack services</description>
	<packaging>pom</packaging>

	<modules>
		<module>application</module>
		<module>infrastructure</module>
		<module>domain</module>
	</modules>


	<properties>
		<skip.unit.tests>false</skip.unit.tests>
		<skip.integration.tests>true</skip.integration.tests>
		<itCoverageAgent></itCoverageAgent>
		<build-helper-maven-plugin.version>3.1.0</build-helper-maven-plugin.version>
		<maven-failsafe-plugin.version>2.18.1</maven-failsafe-plugin.version>
		<jacoco-maven-plugin.version>0.8.10</jacoco-maven-plugin.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<code.coverage.project.folder>${basedir}/../</code.coverage.project.folder>
		<code.coverage.overall.data.folder>${basedir}/target/</code.coverage.overall.data.folder>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<version>5.9.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.platform</groupId>
			<artifactId>junit-platform-runner</artifactId>
			<version>1.9.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.platform</groupId>
			<artifactId>junit-platform-suite-engine</artifactId>
			<version>1.9.1</version>
			<scope>test</scope>
		</dependency>

	</dependencies>

	<profiles>
		<!-- profile for Unit test only -->
		<profile>
			<id>unit</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
		</profile>
		<!--profile for Integration test only -->
		<profile>
			<id>integration-test</id>
			<properties>
				<skip.integration.tests>false</skip.integration.tests>
				<skip.unit.tests>true</skip.unit.tests>
			</properties>
		</profile>
		<!-- Both Unit and Integration tests combined -->
		<profile>
			<id>testAll</id>
			<properties>
				<skip.integration.tests>false</skip.integration.tests>
				<skip.unit.tests>false</skip.unit.tests>
			</properties>
		</profile>
	</profiles>
	<!-- findbugs for code quality -->
	<reporting>
		<plugins>
			<plugin>
					<groupId>com.github.spotbugs</groupId>
					<artifactId>spotbugs-maven-plugin</artifactId>
					<version>4.7.3.4</version>

				<configuration>
					<includeFilterFile>spotbugs-security-include.xml</includeFilterFile>
					<excludeFilterFile>spotbugs-security-exclude.xml</excludeFilterFile>
					<plugins>
						<plugin>
							<groupId>com.h3xstream.findsecbugs</groupId>
							<artifactId>findsecbugs-plugin</artifactId>
							<version>1.12.0</version>
						</plugin>
					</plugins>
				</configuration>
			</plugin>
		</plugins>
	</reporting>

	<build>
		<plugins>

			<!-- UNIT test 'mvn clean install' (optionally: -P unit) by default skips Integration tests-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>3.0.0</version>
				<configuration>
					<skipTests>${skip.unit.tests}</skipTests>
					<excludes>
						<exclude>**/*IntegrationTest.java</exclude>
					</excludes>
					<forkCount>1</forkCount>
				</configuration>
				<dependencies>
				<dependency>
					<groupId>org.junit.jupiter</groupId>
					<artifactId>junit-jupiter-engine</artifactId>
					<version>5.9.1</version>
				</dependency>
				</dependencies>
			</plugin>

			<!-- INTEGRATION test via 'mvn clean install -P integration-test -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>${maven-failsafe-plugin.version}</version>
				<executions>
					<execution>
						<id>integration-tests</id>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
						<configuration>
							<skipTests>${skip.integration.tests}</skipTests>
							<includes>
								<include>**/*IntegrationTest.java</include>
							</includes>
							<reuseForks>true</reuseForks>
							<!-- When running as a Maven plugin, the JaCoCo agent configuration is prepared by invoking the prepare-agent
                            or prepare-agent-integration goals, before the actual tests are run. This sets a property named argLine which
                            points to the JaCoCo agent, later passed as a JVM argument to the test runner -->
							<argLine>${itCoverageAgent}</argLine>
						</configuration>
					</execution>
				</executions>
			</plugin>



			<!-- jacoco agent for code coverage -->
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${jacoco-maven-plugin.version}</version>
				<configuration>
					<excludes>
						<exclude>**/dto/*.*</exclude>
						<exclude>**/exception/*.*</exclude>
						<exclude>**/config/*.*</exclude>
						<exclude>**/model/*.*</exclude>
					</excludes>
				</configuration>
				<executions>
					<execution>
						<id>prepare-unit-tests</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<phase>process-test-resources</phase>
					</execution>
					<!-- prepare agent before integration tests -->
					<execution>
						<id>prepare-agent</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<phase>pre-integration-test</phase>
						<configuration>
							<propertyName>itCoverageAgent</propertyName>
						</configuration>
					</execution>

					<execution>
						<id>check</id>
						<goals>
							<goal>check</goal>
						</goals>
						<configuration>
							<rules>
								<rule>
									<element>BUNDLE</element>
									<limits>
										<limit>
											<counter>INSTRUCTION</counter>
											<value>COVEREDRATIO</value>
											<minimum>0.5</minimum>
										</limit>
									</limits>
								</rule>
							</rules>
						</configuration>
					</execution>
					<execution>
						<id>report</id>
						<goals>
							<goal>report</goal>
						</goals>
						<phase>prepare-package</phase>
					</execution>
				</executions>
			</plugin>

		</plugins>

	</build>

</project>
